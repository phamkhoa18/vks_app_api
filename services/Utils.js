import dotenv from 'dotenv';
dotenv.config();
import slugify from 'slugify';
import mongoose from 'mongoose'; // B·∫°n c·∫ßn import mongoose ƒë·ªÉ d√πng connect

import { GoogleGenAI } from '@google/genai';

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY }); // Assumes GEMINI_API_KEY is set

const Utils = {

    ai_summary: async (content) => {
    const prompt = `
    B·∫°n h√£y t√≥m t·∫Øt n·ªôi dung d∆∞·ªõi ƒë√¢y d√†nh cho app tin t·ª©c, v·ªõi y√™u c·∫ßu:

    - T√≥m t·∫Øt th√†nh m·ªôt danh s√°ch 3-5 √Ω ch√≠nh, m·ªói √Ω l√† m·ªôt c√¢u ng·∫Øn, r√µ r√†ng, d·ªÖ hi·ªÉu.
    - M·ªói √Ω b·∫Øt ƒë·∫ßu b·∫±ng "- " (g·∫°ch ngang + d·∫•u c√°ch).
    - N·ªôi dung t√≥m t·∫Øt ph·∫£i ƒë·ªß √Ω, gi√∫p ng∆∞·ªùi ƒë·ªçc n·∫Øm nhanh ƒë∆∞·ª£c ƒëi·ªÉm ch√≠nh c·ªßa b√†i b√°o m√† kh√¥ng c·∫ßn ƒë·ªçc h·∫øt.
    - Ph·∫ßn cu·ªëi c√πng, vi·∫øt m·ªôt ƒëo·∫°n **b√†i vƒÉn t√≥m t·∫Øt t·ªïng th·ªÉ d√†i, m·∫°ch l·∫°c, ƒë·∫ßy ƒë·ªß v√† d·ªÖ hi·ªÉu**, vi·∫øt li·ªÅn m·∫°nh kh√¥ng xu·ªëng d√≤ng ,nh∆∞ m·ªôt b√†i vi·∫øt ng·∫Øn, b·ªçc trong th·∫ª div v·ªõi class="summary".
    - ƒê·∫∑t d·∫•u ph√¢n c√°ch 3 g·∫°ch ngang "---" tr∆∞·ªõc ƒëo·∫°n t√≥m t·∫Øt t·ªïng th·ªÉ ƒë·ªÉ d·ªÖ ph√¢n bi·ªát.

    N·ªôi dung g·ªëc:
    """${content}"""

    K·∫øt qu·∫£ tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng:

    - √ù ch√≠nh 1
    - √ù ch√≠nh 2
    - √ù ch√≠nh 3
    ---
    <div class="summary">ƒêo·∫°n b√†i vƒÉn t√≥m t·∫Øt t·ªïng th·ªÉ d√†i, ƒë·∫ßy ƒë·ªß c√°c √Ω ch√≠nh, ƒë∆∞·ª£c vi·∫øt m·∫°ch l·∫°c, d·ªÖ nghe nh∆∞ m·ªôt b√†i b√°o ng·∫Øn.</div>
    `;
    
    try {
        const response = await ai.models.generateContent({
            model: 'gemma-3-27b-it', // ‚úÖ ƒê√£ thay ƒë·ªïi t·ª´ gemma-3-4b-it sang gemma-3-27b-it
            contents: prompt,
        });

        const text = response.text.trim();

        // T√°ch ph·∫ßn √Ω ch√≠nh v√† ph·∫ßn t√≥m t·∫Øt t·ªïng th·ªÉ theo d·∫•u ph√¢n c√°ch ---
        const parts = text.split('---');

        // Ph·∫ßn √Ω ch√≠nh (m·∫£ng c√°c d√≤ng b·∫Øt ƒë·∫ßu '- ')
        const summaryArray = (parts[0] || '')
          .split('\n')
          .map(line => line.trim())
          .filter(line => line.startsWith('- '))
          .map(line => line.substring(2)); // lo·∫°i b·ªè '- '

        // Ph·∫ßn t√≥m t·∫Øt t·ªïng th·ªÉ b√™n trong <div class="summary">...</div>
        let summary = '';
        if (parts[1]) {
          const match = parts[1].match(/<div\s+class=["']summary["']>([\s\S]*?)<\/div>/i);
          if (match && match[1]) {
            summary = match[1].trim();
          }
        }

        console.log('üìù Summary Array:', summaryArray);
        console.log('üìÑ Summary Text:', summary);
        
        // Tr·∫£ v·ªÅ object ch·ª©a 2 tr∆∞·ªùng
        return {
          summaryArray: summaryArray,
          summary: summary,
        };
        
    } catch (error) {
        console.error('‚ùå L·ªói khi g·ªçi AI summary:', error.message);
        
        // Fallback: tr·∫£ v·ªÅ summary ƒë∆°n gi·∫£n n·∫øu AI call fail
        return {
          summaryArray: ['N·ªôi dung ƒë∆∞·ª£c t√≥m t·∫Øt t·ª± ƒë·ªông'],
          summary: content.substring(0, 200) + '...',
        };
    }
},

  // Database connection function
  connectDB: async () => {
    try {
      const conn = await mongoose.connect(process.env.MONGO_URI, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      });
      console.log(`MongoDB Connected: ${conn.connection.host}`);
    } catch (error) {
      console.error(`Error connecting to MongoDB: ${error.message}`);
      process.exit(1); // Exit process with failure
    }
  },


  // generateSlug ramdom 3 key, output ( slug + 3 key ramdom )
  generateSlug: (text) => {
    // T·∫°o slug c∆° b·∫£n
    const baseSlug = slugify(text, {
      lower: true,      // chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng
      strict: true,     // ch·ªâ cho ph√©p ch·ªØ, s·ªë, d·∫•u '-'
      remove: /[*+~.()'"!:@]/g  // lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
    });
    
    // T·∫°o 3 k√Ω t·ª± random (ch·ªØ v√† s·ªë)
    const randomSuffix = Math.random()
      .toString(36)      // chuy·ªÉn sang base36 (0-9, a-z)
      .substring(2, 5);  // l·∫•y 3 k√Ω t·ª± t·ª´ v·ªã tr√≠ 2-4
    
    // K·∫øt h·ª£p slug v·ªõi random suffix
    return `${baseSlug}-${randomSuffix}`;
  }
};

export default Utils;
